<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Braincao&#39;s Blog</title>
      <link href="/2020/02/21/blog-index/"/>
      <url>/2020/02/21/blog-index/</url>
      
        <content type="html"><![CDATA[<h2 id="关于博客"><a href="#关于博客" class="headerlink" title="关于博客"></a>关于博客</h2><p>本博客主要记录技术相关的学习笔记与总结，少量包含阶段性节点的成长轨迹与人生思索。它不像微信收藏那样碎片化，也不像商业博文太过公开，它是可自由控制且更为专业性的私人空间。</p><p>所有博文中，绝大多数为原创或有自我沉淀部分，价值高低个人不做评判，因为分享的同时也在收获自己。</p><p>由于第三方评论插件安全性不足，关闭了评论功能，如需联系我请走左下角。当然，本博主随时可接受金钱勾引，在每页最下方点击神奇按钮即可启动资本关怀，这是我最大的动力。</p><h2 id="实时统计"><a href="#实时统计" class="headerlink" title="实时统计"></a>实时统计</h2><p>截至目前，本人已写 <code class="article_number"></code> 篇文章， 共 <code class="site_word_count"></code> 字，</p><p>本站访问人数：<code class="site_uv"></code>人次 ， 访问量：<code class="site_pv"></code>次</p><h2 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h2><ul><li>搜索支持文章标题、标签(#标签)、全文搜索(in:)</li><li>pad/手机等移动端适配</li><li>页面全局vim式快捷键，快捷键说明如下</li></ul><table><thead><tr><th align="center">key</th><th align="center">Description</th></tr></thead><tbody><tr><td align="center">s/S</td><td align="center">全屏/取消全屏</td></tr><tr><td align="center">w/W</td><td align="center">显示/关闭文章目录</td></tr><tr><td align="center">gg/GG</td><td align="center">到页顶</td></tr><tr><td align="center">shift+G/g</td><td align="center">到页尾</td></tr><tr><td align="center">j/J</td><td align="center">向下滑动</td></tr><tr><td align="center">k/K</td><td align="center">向上滑动</td></tr><tr><td align="center">i/I</td><td align="center">启动搜索</td></tr><tr><td align="center">ESC</td><td align="center">若搜索框有内容，清除内容； 若搜索框无内容，取消搜索</td></tr><tr><td align="center">上</td><td align="center">向上选择文章</td></tr><tr><td align="center">下</td><td align="center">向下选择文章</td></tr><tr><td align="center">回车</td><td align="center">打开当前选中的文章，默认打开第一个</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>修改hosts-加速github访问速度</title>
      <link href="/2020/02/20/github-hosts/"/>
      <url>/2020/02/20/github-hosts/</url>
      
        <content type="html"><![CDATA[<p>通过修改hosts，解决github访问慢及加载不出头像问题</p><a id="more"></a><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>github访问慢及加载不出头像问题</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>在<a href="https://www.ipaddress.com/" target="_blank" rel="noopener">https://www.ipaddress.com/</a>网站查下列域名对应的IP地址，如果同一个域名有好几个ip，那就ping一下选个速度最快的。</p><p>修改hosts，<code>sudo vi /etc/hosts</code>，添加下面域名解析，再刷新dns：<code>sudo killall -HUP mDNSResponder</code></p><pre><code>#解决git clone 速度慢的问题,这个不要动192.30.253.112 github.com151.101.185.194 github.global.ssl.fastly.net#下面的实时查192.30.253.119 gist.github.com199.232.28.133 assets-cdn.github.com199.232.28.133 raw.githubusercontent.com199.232.28.133 gist.githubusercontent.com199.232.28.133 cloud.githubusercontent.com199.232.28.133 camo.githubusercontent.com199.232.28.133 avatars0.githubusercontent.com199.232.28.133 avatars1.githubusercontent.com199.232.28.133 avatars2.githubusercontent.com199.232.28.133 avatars3.githubusercontent.com199.232.28.133 avatars4.githubusercontent.com199.232.28.133 avatars5.githubusercontent.com199.232.28.133 avatars6.githubusercontent.com199.232.28.133 avatars7.githubusercontent.com199.232.28.133 avatars8.githubusercontent.com#解决浏览器下载master-zip包的问题140.82.113.10 codeload.github.com</code></pre>]]></content>
      
      
      <categories>
          
          <category> 综合技术问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hosts </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java学习路线（10天搞定）</title>
      <link href="/2018/10/09/java%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%EF%BC%8810%E5%A4%A9%E6%90%9E%E5%AE%9A%EF%BC%89/"/>
      <url>/2018/10/09/java%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%EF%BC%8810%E5%A4%A9%E6%90%9E%E5%AE%9A%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>10天恶补java的学习路线mark</p><a id="more"></a><h1 id="java学习路线（10天搞定）"><a href="#java学习路线（10天搞定）" class="headerlink" title="java学习路线（10天搞定）"></a>java学习路线（10天搞定）</h1><ul><li><a href="http://bbs.itheima.com/thread-200600-1-1.html" target="_blank" rel="noopener">阳哥笔记】Java基础之笔记系列（全）</a></li></ul><p>用法：一共27章笔记，每章都很少，按顺序看完即可。有问题想深入的可以百度+b站视频，以下是看的过程中我另外加餐深入了解的：</p><ul><li><p><a href="https://www.cnblogs.com/xiaoxi/p/6036701.html" target="_blank" rel="noopener">博客_String相关</a></p></li><li><p><a href="https://www.bilibili.com/video/av29576265/?p=1" target="_blank" rel="noopener">b站_多线程</a></p></li><li><p><a href="https://www.bilibili.com/video/av28590247/?p=1" target="_blank" rel="noopener">b站_集合</a></p></li><li><p><a href="https://www.bilibili.com/video/av29576016/?p=1" target="_blank" rel="noopener">b站_IO</a></p></li></ul><p>总结：以阳哥笔记为主线往下看，附加string相关+三章的b站视频即可。(截止写完这篇博客时，阳哥笔记还剩网络编程、反射两章，估计还要配合b站视频看)</p><p>疯狂看的话，一周半应该能看完(符合学习一门语言10天的节奏，时间太长收益不大)。把阳哥看完，java基础应该差不多了</p><p>疯狂看的话，一周半应该能看完(符合学习一门语言10天的节奏，时间太长收益不大)。把阳哥看完，java基础应该差不多了<br>疯狂看的话，一周半应该能看完(符合学习一门语言10天的节奏，时间太长收益不大)。把阳哥看完，java基础应该差不多了<br>疯狂看的话，一周半应该能看完(符合学习一门语言10天的节奏，时间太长收益不大)。把阳哥看完，java基础应该差不多了<br>疯狂看的话，一周半应该能看完(符合学习一门语言10天的节奏，时间太长收益不大)。把阳哥看完，java基础应该差不多了<br>疯狂看的话，一周半应该能看完(符合学习一门语言10天的节奏，时间太长收益不大)。把阳哥看完，java基础应该差不多了<br>疯狂看的话，一周半应该能看完(符合学习一门语言10天的节奏，时间太长收益不大)。把阳哥看完，java基础应该差不多了<br>疯狂看的话，一周半应该能看完(符合学习一门语言10天的节奏，时间太长收益不大)。把阳哥看完，java基础应该差不多了<br>疯狂看的话，一周半应该能看完(符合学习一门语言10天的节奏，时间太长收益不大)。把阳哥看完，java基础应该差不多了<br>疯狂看的话，一周半应该能看完(符合学习一门语言10天的节奏，时间太长收益不大)。把阳哥看完，java基础应该差不多了<br>疯狂看的话，一周半应该能看完(符合学习一门语言10天的节奏，时间太长收益不大)。把阳哥看完，java基础应该差不多了</p><h1 id="java入门时的一些笔记"><a href="#java入门时的一些笔记" class="headerlink" title="java入门时的一些笔记"></a>java入门时的一些笔记</h1><hr><p>2017.12.28</p><p>theme: java菜鸟教程</p><p>问题描述：为了应付java考试也为了实验室项目需求，决定将java重新过一遍，多多练习，查漏补缺</p><p>解决方法：<br>java菜鸟教程过一遍<br>参考资料：<br><a href="http://www.runoob.com/java/java-tutorial.html" target="_blank" rel="noopener">http://www.runoob.com/java/java-tutorial.html</a> Java 教程<br>JAVA 工程师技术路线参考<br>.    基础：Java 教程，JSP 教程<br>.    进阶：SQL 教程，MySQL 教程<br>.    高级：正则表达式教程，Mongodb教程， AJAX 教程，JSON 教程，XML 教程，<br>.    开发工具：Eclipse、IDEA<br>进度：未完</p><hr><p>2017.12.28</p><p>theme: IDEA编辑器快速上手hello world</p><p>问题描述：想用idea上手hello world发现运行不了</p><p>解决方法：<br>只是因为选错了框架，不是java项目的框架需要别的环境配置而已。正常的建javaEE的project即可，不需要额外的配置<br>参考资料：<br><a href="http://blog.csdn.net/datouniao1/article/details/53142192" target="_blank" rel="noopener">http://blog.csdn.net/datouniao1/article/details/53142192</a> Intellij Idea创建一个简单的java项目<br>进度：完</p><hr><p>2017.12.30</p><p>theme: java学习笔记</p><p>问题描述与解决方法：</p><hr><p>2017.12.30</p><p>theme: java学习笔记</p><p>问题描述与解决方法：</p><p>int a = 20;<br>System.out.println(new Integer(a).toString()); //int to String</p><p>String ss = “25”;<br>System.out.println(Integer.parseInt(ss)); //String to int</p><hr><p>2017.12.30</p><p>theme: java学习笔记</p><p>问题描述与解决方法：</p><hr><p>2017.12.30</p><p>theme: java学习笔记</p><p>问题描述与解决方法：</p><p>结论：静态方法中只能访问静态成员变量，静态方法中也只能调用静态方法</p><p>问：是否可以从一个static方法内部发出对非static方法的调用? 不可以<br>不可以。因为非static方法是要与对象关联在一起的，必须创建一个对象后，才可以在该对象上进行方法调用，而static方法调用时不需要创建对象，可以直接调用。也就是说，当一个static方法被调用时，可能还没有创建任何实例对象，如果从一个static方法中发出对非static方法的调用，那个非static方法是关联到哪个对象上的呢？这个逻辑无法成立，故不可以</p><p>举例：<br>public class xix {<br>    // 静态成员<br>    public static String string=”static成员”;<br>    // 普通成员<br>    public String string2=”非static成员”;<br>    // 静态方法<br>    public static void method(){<br>        string=”sss”;<br>        //string2=”sss”;编译报错,因为静态方法里面只能调用静态方法或静态成员<br>        //method2();<br>        System.out.println(“这是static方法,static方法与对象无关”);<br>    }</p><pre><code>// 普通方法 public void method2(){    string =&quot;string1&quot;;    string2=&quot;string2&quot;;    method(); //非静态方法里面可以发出对static方法的调用    System.out.println(&quot;这是非static方法,此方法必须和指定的对象关联起来才起作用&quot;);}public static void main(String[] args) {    xix x=new xix();    x.method2();// 引用调用普通方法     x.method();// 引用调用静态方法}</code></pre><p>}</p><hr><p>2017.12.30</p><p>theme: java学习笔记</p><p>问题描述与解决方法：</p><hr><p>2017.12.30</p><p>theme: java学习笔记</p><p>问题描述与解决方法：</p><hr><p>2017.12.30</p><p>theme: java学习笔记</p><p>问题描述与解决方法：</p><hr><p>2017.12.30</p><p>theme: java学习笔记</p><p>问题描述与解决方法：详解final修饰符</p><p>1、final 修饰类中的属性或者变量<br>无论属性是基本类型还是引用类型，final 所起的作用都是变量里面存放的”值”不能变。<br>这个值，对于基本类型来说，变量里面放的就是实实在在的值，如 1，”abc” 等。<br>而引用类型变量里面放的是个地址，所以用 final 修饰引用类型变量指的是它里面的地址不能变，并不是说这个地址所指向的对象或数组的内容不可以变，这个一定要注意。<br>例如：类中有一个属性是 final Person p=new Person(“name”); 那么你不能对 p 进行重新赋值，但是可以改变 p 里面属性的值 p.setName(‘newName’);<br>final 修饰属性，声明变量时可以不赋值，而且一旦赋值就不能被修改了。对 final 属性可以在三个地方赋值：声明时、初始化块中、构造方法中，总之一定要赋值。</p><p>2、final修饰类中的方法<br>作用：可以被继承，但继承后不能被重写。</p><p>3、final修饰类<br>作用：类不可以被继承。</p><p>final 变量：<br>final 变量能被显式地初始化并且只能初始化一次。被声明为 final 的对象的引用不能指向不同的对象。但是 final 对象里的数据可以被改变。也就是说 final 对象的引用不能改变，但是里面的值可以改变。<br>final 修饰符通常和 static 修饰符一起使用来创建类常量。</p><p>final 方法<br>类中的 final 方法可以被子类继承，但是不能被子类修改。<br>声明 final 方法的主要目的是防止该方法的内容被修改。<br>public class Test{<br>    public final void changeName(){<br>       // 方法体<br>    }<br>}</p><p>final 类<br>final 类不能被继承，没有类能够继承 final 类的任何特性。<br>public final class Test {<br>   // 类体<br>}</p><hr><p>2017.12.30</p><p>theme: java学习笔记</p><p>问题描述与解决方法：详解abstract修饰符</p><p>抽象类：<br>抽象类不能用来实例化对象，声明抽象类的唯一目的是为了将来对该类进行扩充。<br>一个类不能同时被 abstract 和 final 修饰。如果一个类包含抽象方法，那么该类一定要声明为抽象类，否则将出现编译错误。<br>抽象类可以包含抽象方法和非抽象方法。<br>abstract class Caravan{<br>   private double price;<br>   private String model;<br>   private String year;<br>   public abstract void goFast(); //抽象方法<br>   public abstract void changeColor();<br>}</p><p>抽象方法<br>抽象方法是一种没有任何实现的方法，该方法的的具体实现由子类提供。<br>抽象方法不能被声明成 final 和 static。<br>任何继承抽象类的子类必须实现父类的所有抽象方法，除非该子类也是抽象类。<br>如果一个类包含若干个抽象方法，那么该类必须声明为抽象类。抽象类可以不包含抽象方法。<br>抽象方法的声明以分号结尾，例如：public abstract void sample();。<br>public abstract class SuperClass{<br>    abstract void m(); //抽象方法<br>}</p><p>class SubClass extends SuperClass{<br>     //实现抽象方法<br>      void m(){<br>          ………<br>      }<br>}<br>抽象类除了不能实例化对象之外，抽象类必须被继承，才能被使用<br>            1. 抽象类不能被实例化(初学者很容易犯的错)，如果被实例化，就会报错，编译无法通过。只有抽象类的非抽象子类可以创建对象。<br>            2. 抽象类中不一定包含抽象方法，但是有抽象方法的类必定是抽象类。<br>            3. 抽象类中的抽象方法只是声明，不包含方法体，就是不给出方法的具体实现也就是方法的具体功能。<br>            4. 构造方法，类方法（用static修饰的方法）不能声明为抽象方法。<br>            5. 抽象类的子类必须给出抽象类中的抽象方法的具体实现，除非该子类也是抽象类。<br>    —————————————————————————————————-<br>2017.12.30</p><p>theme: java学习笔记</p><p>问题描述与解决方法：其他修饰符</p><p>synchronized 修饰符<br>synchronized 关键字声明的方法同一时间只能被一个线程访问。synchronized 修饰符可以应用于四个访问修饰符。<br>public synchronized void showDetails(){<br>…….<br>}</p><p>transient 修饰符<br>序列化的对象包含被 transient 修饰的实例变量时，java 虚拟机(JVM)跳过该特定的变量。<br>该修饰符包含在定义变量的语句中，用来预处理类和变量的数据类型。<br>public transient int limit = 55;   // 不会持久化<br>public int b; // 持久化</p><p>volatile 修饰符<br>volatile 修饰的成员变量在每次被线程访问时，都强制从共享内存中重新读取该成员变量的值。而且，当成员变量发生变化时，会强制线程将变化值回写到共享内存。这样在任何时刻，两个不同的线程总是看到某个成员变量的同一个值。<br>一个 volatile 对象引用可能是 null。<br>public class MyRunnable implements Runnable<br>{<br>    private volatile boolean active;<br>    public void run()<br>    {<br>        active = true;<br>        while (active) // 第一行<br>        {<br>            // 代码<br>        }<br>    }<br>    public void stop()<br>    {<br>        active = false; // 第二行<br>    }<br>}<br>通常情况下，在一个线程调用 run() 方法（在 Runnable 开启的线程），在另一个线程调用 stop() 方法。 如果 第一行 中缓冲区的 active 值被使用，那么在 第二行 的 active 值为 false 时循环不会停止。<br>但是以上代码中我们使用了 volatile 修饰 active，所以该循环会停止。</p><hr><p>2017.12.30</p><p>theme: java学习笔记</p><p>问题描述与解决方法：子类与父类</p><p>子类是父类的类型，但父类不是子类的类型。<br>子类的实例可以声明为父类型，但父类的实例不能声明为子类型。</p><p>class Vehicle {}</p><p>public class Car extends Vehicle {<br>    public static void main(String args[]){<br>        Vehicle v1 = new Vehicle(); //父类型<br>        Vehicle v2 = new Car(); //子类的实例可以声明为父类型<br>        Car c1 = new Car();    // 子类型<br>        Car c2 = new Vehicle(); //这句会报错，父类型的实例不能声明为子类型</p><pre><code>    //Car（子类）是Vehicle（父类）类型, Vehicle（父类）不是Car（子类）类型    boolean result1 =  c1 instanceof Vehicle;    // true    boolean result2 =  c1 instanceof Car;        // true    boolean result3 =  v1 instanceof Vehicle;    // true    boolean result4 =  v1 instanceof Car;          // false    boolean result5 =  v2 instanceof Vehicle;    // true    boolean result6 =  v2 instanceof Car;          // true    System.out.println(result1);    System.out.println(result2);    System.out.println(result3);    System.out.println(result4);    System.out.println(result5);    System.out.println(result6);</code></pre><p>   }<br>}</p><hr><p>2017.12.30</p><p>theme: java学习笔记</p><p>问题描述与解决方法：switch语句</p><p>当变量的值与 case 语句的值相等时，那么 case 语句之后的语句开始执行，直到 break 语句出现才会跳出 switch 语句。</p><p>output:<br>b<br>c<br>haha</p><hr><p>2017.12.30</p><p>theme: java学习笔记</p><p>问题描述与解决方法：在控制台输入由*号组成的菱形</p><p>public class Test{<br>    public static void main(String[] args)<br>    {<br>        int num = 11;  //打印一个一行最多num个<em>的菱形<br>        int k = num; //通过数学计算，我们可知菱形的行数总数也为num<br>        for(int i=0; i&lt;(k+1)/2; ++i)    //升序排序打印输出<br>        {<br>            int mid = (k-1)/2; //mid是每行的居中点下标<br>            for(int j=0; j&lt;k; ++j)<br>            {<br>                int temp = j-mid;<br>                if(java.lang.Math.abs(temp) &lt;= i)<br>                {<br>                    System.out.print(“</em>“);<br>                }<br>                else<br>                {<br>                    System.out.print(“ “);<br>                }<br>            }<br>            System.out.println();<br>        }</p><pre><code>    for(int i=(k-1)/2-1; i&gt;=0; i--)    //降序排序打印输出    {        int mid = (k-1)/2; //mid是每行的居中点下标        for(int j=0; j&lt;k; ++j)        {            int temp = j-mid;            if(java.lang.Math.abs(temp) &lt;= i)            {                System.out.print(&quot;*&quot;);            }            else            {                System.out.print(&quot; &quot;);            }        }        System.out.println();    }}</code></pre><p>}</p><hr><p>2017.12.30</p><p>theme: java学习笔记</p><p>问题描述与解决方法：==与equals</p><p>output:false</p><hr><p>2017.12.30</p><p>theme: java学习笔记</p><p>问题描述与解决方法：String类<br> abc<br>注意：String 类是不可改变的，所以你一旦创建了 String 对象，那它的值就无法改变了。<br>如果需要对字符串做很多修改，那么应该选择使用 StringBuffer &amp; StringBuilder 类。</p><hr><p>2017.12.31</p><p>theme: java学习笔记<br>问题描述与解决方法：StringBuffer 和 StringBuilder 类<br>当对字符串进行修改的时候，需要使用 StringBuffer 和 StringBuilder 类。<br>和 String 类不同的是，StringBuffer 和 StringBuilder 类的对象能够被多次的修改，并且不产生新的未使用对象。<br>StringBuilder 类在 Java 5 中被提出，它和 StringBuffer 之间的最大不同在于 StringBuilder 的方法不是线程安全的（不能同步访问）。<br>由于 StringBuilder 相较于 StringBuffer 有速度优势，所以多数情况下建议使用 StringBuilder 类。然而在应用程序要求线程安全的情况下，则必须使用 StringBuffer 类。</p><pre><code>Java 中 StringBuffer 和 String 是有一定的区别的，首先，String 是被 final 修饰的，他的长度是不可变的，就算调用 String 的</code></pre><p>concat 方法，那也是把字符串拼接起来并重新创建一个对象，把拼接后的 String 的值赋给新创建的对象，而 StringBuffer 的长度是可变的，调用StringBuffer 的 append 方法，来改变 StringBuffer 的长度，并且，相比较于 StringBuffer，String 一旦发生长度变化，是非常耗费内存的！</p><p>String 长度大小不可变<br>StringBuffer 和 StringBuilder 长度可变<br>StringBuffer 线程安全 StringBuilder 线程不安全<br>StringBuilder 速度快</p><hr><p>2017.12.31</p><p>theme: java学习笔记</p><p>问题描述与解决方法：length与size<br>length()方法，length属性和size()的方法的区别:<br>             1.length()方法是针对字符串来说的，要求一个字符串的长度就要用到它的length()方法；<br>             2.length属性是针对Java中的数组来说的，要求数组的长度可以用其length属性；<br>             3.java中的size()方法是针对泛型集合说的,如果想看这个泛型有多少个元素,就调用此方法来查看!</p><hr><p>2017.12.31</p><p>theme: java学习笔记</p><p>问题描述与解决方法：数组与Arrays类<br>java.util.Arrays 类能方便地操作数组，它提供的所有方法都是静态的。<br>具有以下功能：<br>            给数组赋值：通过 fill 方法。<br>            对数组排序：通过 sort 方法,按升序。<br>            比较数组：通过 equals 方法比较数组中元素值是否相等。<br>            查找数组元素：通过 binarySearch 方法能对排序好的数组进行二分查找法操作。</p><p>String str = “helloworld”;<br>char[] data = str.toCharArray();// 将字符串转为数组</p><hr><p>2017.12.31</p><p>theme: java学习笔记</p><p>问题描述与解决方法：</p><ol><li><p>对整数进行格式化：%[index$][标识][最小宽度]转换方式</p><pre><code>     格式化字符串由4部分组成，特殊的格式常以%index$开头，index从1开始取值，表示将第index个参数拿进来进行格式化，[最小宽度]的含义也很好理解，就是最终该整数转化的字符串最少包含多少位数字。剩下2个部分的含义：     标识：      &#39;-&#39; 在最小宽度内左对齐，不可以与&quot;用0填充&quot;同时使用      &#39;#&#39; 只适用于8进制和16进制，8进制时在结果前面增加一个0，16进制时在结果前面增加0x      &#39;+&#39; 结果总是包括一个符号(一般情况下只适用于10进制，若对象为BigInteger才可以用于8进制和16进制)      &#39; &#39; 正值前加空格，负值前加负号(一般情况下只适用于10进制，若对象为BigInteger才可以用于8进制和16进制)      &#39;0&#39; 结果将用零来填充      &#39;,&#39; 只适用于10进制，每3位数字之间用&quot;，&quot;分隔      &#39;(&#39; 若参数是负数，则结果中不添加负号而是用圆括号把数字括起来(同&#39;+&#39;具有同样的限制)     转换方式：     d-十进制 o-八进制 x或X-十六进制     上面的说明过于枯燥，我们来看几个具体的例子。需要特别注意的一点是：大部分标识字符可以同时使用。</code></pre></li><li><p>对浮点数进行格式化：%[index$][标识][最少宽度][.精度]转换方式<br>我们可以看到，浮点数的转换多了一个”精度”选项，可以控制小数点后面的位数。<br>标识：</p><pre><code>     &#39;-&#39; 在最小宽度内左对齐，不可以与&quot;用0填充&quot;同时使用     &#39;+&#39; 结果总是包括一个符号     &#39; &#39; 正值前加空格，负值前加负号     &#39;0&#39; 结果将用零来填充     &#39;,&#39; 每3位数字之间用&quot;，&quot;分隔(只适用于fgG的转换)     &#39;(&#39; 若参数是负数，则结果中不添加负号而是用圆括号把数字括起来(只适用于eEfgG的转换)</code></pre><p>转换方式：</p><pre><code>     &#39;e&#39;, &#39;E&#39; -- 结果被格式化为用计算机科学记数法表示的十进制数     &#39;f&#39; -- 结果被格式化为十进制普通表示方式     &#39;g&#39;, &#39;G&#39; -- 根据具体情况，自动选择用普通表示方式还是科学计数法方式     &#39;a&#39;, &#39;A&#39; -- 结果被格式化为带有效位数和指数的十六进制浮点数</code></pre></li><li><p>对字符进行格式化：<br>对字符进行格式化是非常简单的，c表示字符，标识中’-‘表示左对齐，其他就没什么了。</p></li></ol><p>参考资料：<br>这个格式化没有太掌握，用的时候还需要进一步学习<br>进度：未完</p><hr><p>2017.12.31</p><p>theme: java学习笔记</p><p>问题描述与解决方法：sleep休眠、测量时间<br>sleep()使当前线程进入停滞状态（阻塞当前线程），让出CPU的使用、目的是不让当前线程独自霸占该进程所获的CPU资源，以留一定时间给其他线程执行的机会。<br>你可以让程序休眠一毫秒的时间或者到您的计算机的寿命长的任意段时间。例如，下面的程序会休眠3秒：<br>    Thread.sleep(1000*3);   // 休眠3秒<br>测量时间：</p><h2 id="output-3001"><a href="#output-3001" class="headerlink" title="output:3001"></a>output:3001</h2><p>2017.12.31</p><p>theme: java学习笔记</p><p>问题描述与解决方法：Calendar类与Date类<br>我们现在已经能够格式化并创建一个日期对象了，但是我们如何才能设置和获取日期数据的特定部分呢，比如说小时，日，或者分钟? 我们又如何在日期的这些部分加上或者减去值呢? 答案是使用Calendar 类。<br>Calendar类的功能要比Date类强大很多，而且在实现方式上也比Date类要复杂一些。<br>Calendar类是一个抽象类，在实际使用时实现特定的子类的对象，创建对象的过程对程序员来说是透明的，只需要使用getInstance方法创建即可。</p><p>1.Calendar c = Calendar.getInstance();//默认是当前日期</p><p>2.</p><p>参考资料：<br>建议用的时候详细再回顾下</p><hr><p>2017.12.31</p><p>theme: java学习笔记</p><p>问题描述与解决方法：正则表达式<br>java.util.regex包</p><p>java.util.regex 包主要包括以下三个类：<br>            Pattern 类：pattern 对象是一个正则表达式的编译表示。Pattern 类没有公共构造方法。要创建一个 Pattern 对象，你必须首先调用其公共静态编译方法，它返回一个 Pattern 对象。该方法接受一个正则表达式作为它的第一个参数。<br>            Matcher 类：Matcher 对象是对输入字符串进行解释和匹配操作的引擎。与Pattern 类一样，Matcher 也没有公共构造方法。你需要调用 Pattern 对象的 matcher 方法来获得一个 Matcher 对象。<br>            PatternSyntaxException：PatternSyntaxException 是一个非强制异常类，它表示一个正则表达式模式中的语法错误。<br>1.匹配一组<br>String content = “I am noob “ + “from runoob.com.”;<br>String pattern = “.<em>runoob.</em>“;<br>boolean isMatch = Pattern.matches(pattern, content);<br>System.out.println(“字符串中是否包含了 ‘runoob’ 子字符串? “ + isMatch); //true</p><ol start="2"><li><p>匹配多组<br>// 按指定模式在字符串查找<br>   String line = “This order was placed for QT3000! OK?”;<br>   String pattern = “(\D<em>)(\d+)(.</em>)”;</p><p>   // 创建 Pattern 对象<br>   Pattern r = Pattern.compile(pattern);</p><p>   // 现在创建 matcher 对象<br>   Matcher m = r.matcher(line);<br>   if (m.find( )) {</p><pre><code>  System.out.println(&quot;Found value: &quot; + m.group(0) );  System.out.println(&quot;Found value: &quot; + m.group(1) );  System.out.println(&quot;Found value: &quot; + m.group(2) );  System.out.println(&quot;Found value: &quot; + m.group(3) ); </code></pre><p>   } else {</p><pre><code>  System.out.println(&quot;NO MATCH&quot;);</code></pre><p>   }</p></li></ol><p>参考资料：<br>建议用的时候详细再回顾下</p><hr><p>2017.12.31</p><p>theme: java学习笔记</p><p>问题描述与解决方法：可变参数<br>JDK 1.5 开始，Java支持传递同类型的可变参数给一个方法。<br>在方法声明中，在指定参数类型后加一个省略号(…) 。<br>一个方法中只能指定一个可变参数，它必须是方法的最后一个参数。任何普通的参数必须在它之前声明。</p><hr><p>2017.12.31</p><p>theme: java学习笔记</p><p>问题描述与解决方法：finalize() 方法<br>Java 允许定义这样的方法，它在对象被垃圾收集器析构(回收)之前调用，这个方法叫做 finalize( )，它用来清除回收对象。<br>例如，你可以使用 finalize() 来确保一个对象打开的文件被关闭了。<br>在 finalize() 方法里，你必须指定在对象销毁时候要执行的操作。<br>finalize() 一般格式是：<br>protected void finalize()<br>{<br>   // 在这里终结代码<br>}<br>关键字 protected 是一个限定符，它确保 finalize() 方法不会被该类以外的代码调用。<br>当然，Java 的内存回收可以由 JVM 来自动完成。如果你手动使用，则可以使用上面的方法。</p><hr><p>2017.12.31</p><p>theme: java学习笔记</p><p>问题描述与解决方法：java异常处理<br>所有的异常类是从 java.lang.Exception 类继承的子类。<br>Exception 类是 Throwable 类的子类。除了Exception类外，Throwable还有一个子类E<br>rror 。<br>Java 程序通常不捕获错误。错误一般发生在严重故障时，它们在Java程序处理的范畴之外。<br>Error 用来指示运行时环境发生的错误。<br>例如，JVM 内存溢出。一般地，程序不会从错误中恢复。<br>异常类有两个主要的子类：IOException 类和 RuntimeException 类。</p><p>参考资料：<br>只是粗浅认识，_需要用的时候详细参考菜鸟教程的java异常处理！</p><p>从大体来分异常为两块：<br>1、error—错误 ： 是指程序无法处理的错误，表示应用程序运行时出现的重大错误。例如jvm运行时出现的OutOfMemoryError以及Socket编程时出现的端口占用等程序无法处理的错误。<br>2、Exception — 异常 ：异常可分为运行时异常跟编译异常<br>             1）运行时异常：即RuntimeException及其之类的异常。这类异常在代码编写的时候不会被编译器所检测出来，是可以不需要被捕获，但是程序员也可以根据需要进行捕获抛出。常见的RUNtimeException有：NullpointException（空指针异常），ClassCastException（类型转换异常），IndexOutOfBoundsException（数组越界异常）等。<br>             2）编译异常：RuntimeException以外的异常。这类异常在编译时编译器会提示需要捕获，如果不进行捕获则编译错误。常见编译异常有：IOException（流传输异常），SQLException（数据库操作异常）等。<br>3、java处理异常的机制：抛出异常以及捕获异常 ，一个方法所能捕捉的异常，一定是Java代码在某处所抛出的异常。简单地说，异常总是先被抛出，后被捕捉的。<br>4、throw跟throws的区别:<br>public void test() throws Exception {<br>    throw new Exception();<br>}<br>从上面这一段代码可以明显的看出两者的区别。throws表示一个方法声明可能抛出一个异常，throw表示此处抛出一个已定义的异常（可以是自定义需继承Exception，也可以是java自己给出的异常类）。<br>5、接下来看一下如何捕获异常：<br>1）首先java对于异常捕获使用的是try—catch或try — catch — finally 代码块，程序会捕获try代码块里面的代码，若捕获到异常则进行catch代码块处理。若有finally则在catch处理后执行finally里面的代码。然而存在这样两个问题：<br>a.看如下代码：<br>try{<br>    //待捕获代码<br>}catch（Exception e）{<br>    System.out.println(“catch is begin”);<br>    return 1 ；<br>}finally{<br>     System.out.println(“finally is begin”);<br>}<br>在catch里面有一个return，那么finally会不会被执行呢？答案是肯定的，上面代码的执行结果为：<br>catch is begin<br>finally is begin<br>也就是说会先执行catch里面的代码后执行finally里面的代码最后才return1 ；<br>b.看如下代码：<br>try{<br>   //待捕获代码<br>}catch（Exception e）{<br>    System.out.println(“catch is begin”);<br>    return 1 ；<br>}finally{<br>     System.out.println(“finally is begin”);<br>     return 2 ;<br>}<br>在b代码中输出结果跟a是一样的，然而返回的是return 2 ； 原因很明显，就是执行了finally后已经return了，所以catch里面的return不会被执行到。也就是说finally永远都会在catch的return前被执行。（这个是面试经常问到的问题哦！）<br>6、对于异常的捕获不应该觉得方便而将几个异常合成一个Exception进行捕获，比如有IO的异常跟SQL的异常，这样完全不同的两个异常应该分开处理！而且在catch里处理异常的时候不要简单的e.printStackTrace()，而是应该进行详细的处理。比如进行console打印详情或者进行日志记录。<br>注意：异常和错误的区别：异常能被程序本身可以处理，错误是无法处理。</p><hr><p>2017.12.31</p><p>theme: java学习笔记</p><p>问题描述与解决方法：java继承<br>注意：super 语句必须是子类构造方法的第一条语句。不能在子类中使用父类构造方法名来调用父类构造方法。 父类的构造方法不被子类继承。调用父类的构造方法的唯一途径是使用 super 关键字，如果子类中没显式调用，则编译器自动将 super(); 作为子类构造方法的第一条语句。这会形成一个构造方法链。<br>静态方法中不能使用 super 关键字。</p><ol><li><p>这个例子很重要，第三个输出注意看<br>class SuperClass {<br>private int n;<br>SuperClass(){<br> System.out.println(“SuperClass()”);<br>}<br>SuperClass(int n) {<br> System.out.println(“SuperClass(int n)”);<br> this.n = n;<br>}<br>}<br>class SubClass extends SuperClass{<br>private int n;</p><p>SubClass(){<br> super(300);<br> System.out.println(“SubClass”);<br>}  </p><p>public SubClass(int n){<br> System.out.println(“SubClass(int n):”+n);<br> this.n = n;<br>}<br>}<br>public class TestSuperSub{<br>public static void main (String args[]){<br> SubClass sc = new SubClass();<br> SubClass sc2 = new SubClass(200);<br>}<br>}</p></li></ol><p>output:<br>SuperClass(int n)<br>SubClass<br>SuperClass() //一定注意这一点，在子类构造方法之前，首先是调用父类的构造方法<br>SubClass(int n):200</p><p>2.又一个例子很重要<br>class Animal{<br>   public void move(){<br>      System.out.println(“动物可以移动”);<br>   }<br>}</p><p>class Dog extends Animal{<br>   public void move(){<br>      System.out.println(“狗可以跑和走”);<br>   }<br>   public void bark(){<br>      System.out.println(“狗可以吠叫”);<br>   }<br>}</p><p>public class TestDog{<br>   public static void main(String args[]){<br>      Animal a = new Animal(); // Animal 对象<br>      Animal b = new Dog(); // Dog 对象  //———如果改成Dog b = new Dog();就对了</p><pre><code>  a.move();// 执行 Animal 类的方法  b.move();//执行 Dog 类的方法  b.bark();</code></pre><p>   }<br>}</p><p>output:<br>TestDog.java:30: cannot find symbol<br>symbol  : method bark()<br>location: class Animal<br>                b.bark();<br>这是由于在编译阶段，只是检查参数的引用类型。如果编译通过，在运行时，Java虚拟机(JVM)指定对象的类型并且运行该对象的方法。<br>因此在上面的例子中，之所以能编译失败，是因为Animal类中不存在move方法，改成Dog b = new Dog();就对了</p><hr><p>2017.12.31</p><p>theme: java学习笔记</p><p>问题描述与解决方法：java多态深入理解<br>强烈建议直接看菜鸟教程的多态和多态前一节(重载、重写)<br>多态存在的三个必要条件<br>            继承<br>            重写<br>            父类引用指向子类对象<br>当使用多态方式调用方法时，首先检查父类中是否有该方法，如果没有，则编译错误；如果有，再去调用子类的同名方法。<br>多态的好处：可以使程序有良好的扩展，并可以对所有类的对象进行通用处理。</p><p>方法的重写(Overriding)和重载(Overloading)是java多态性的不同表现，重写是父类与子类之间多态性的一种表现，重载可以理解成多态的具体表现形式。<br>            (1)方法重载是一个类中定义了多个方法名相同,而他们的参数的数量不同或数量相同而类型和次序不同,则称为方法的重载(Overloading)。<br>            (2)方法重写是在子类存在方法与父类的方法的名字相同,而且参数的个数与类型一样,返回值也一样的方法,就称为重写(Overriding)。<br>            (3)方法重载是一个类的多态性表现,而方法重写是子类与父类的一种多态性表现。<br>重载与重写的简明理解:<br>             重载反映的是”随机应变”. 同样一项功能, 根据数据类型的不同, 采用不同的处理方式.<br>            重写反映的是”父子差异”. 你”继承”了父亲吃火锅的爱好, 但是吃同一份鸳鸯锅(注意, 数据类型相同) , 你喜欢涮红汤, 你父亲喜欢涮清汤.</p><p>所谓多态就是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，即一个引用变量倒底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。因为在程序运行时才确定具体的类，这样，不用修改源程序代码，就可以让引用变量绑定到各种不同的类实现上，从而导致该引用调用的具体方法随之改变，即不修改程序代码就可以改变程序运行时所绑定的具体代码，让程序可以选择多个运行状态，这就是多态性。<br>参考资料：<br>java提高篇(四)—–理解java的三大特性之多态</p><hr><p>2017.12.31</p><p>theme: java学习笔记</p><p>问题描述与解决方法：java接口<br>类的多继承是不合法，一个类只能继承一个类，可以实现多个接口，但接口允许多继承.<br>1.接口可以多继承<br>2.接口的方法声明必须是 public abstract 即便不写默认也是<br>3.接口里面不能包含方法具体实现<br>4.类实继承接口必须实现接口里申明的全部方法，除非该类是抽象类<br>5.类里面可以声明 public static final 修饰的变量<br>6.接口不能被实例化，但是可以被实现类创建<br>接口里面定义的成员变量都是  public static final修饰，抽象类中的变量是普通变量<br>抽象类和接口的区别<br>            1. 抽象类中的方法可以有方法体，就是能实现方法的具体功能，但是接口中的方法不行。<br>            2. 抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是 public static final 类型的。<br>            3. 接口中不能含有静态代码块以及静态方法(用 static 修饰的方法)，而抽象类是可以有静态代码块和静态方法。<br>            4. 一个类只能继承一个抽象类，而一个类却可以实现多个接口。</p><p>什么时候使用抽象类和接口<br>            如果你拥有一些方法并且想让它们中的一些有默认实现，那么使用抽象类吧。<br>            如果你想实现多重继承，那么你必须使用接口。由于Java不支持多继承，子类不能够继承多个类，但可以实现多个接口。因此你就可以使用接口来解决它。<br>            如果基本功能在不断改变，那么就需要使用抽象类。如果不断改变基本功能并且使用接口，那么就需要改变所有实现了该接口的类。</p><hr><p>2017.12.31</p><p>theme: java学习笔记</p><p>问题描述与解决方法：java多线程<br>Java 提供了三种创建线程的方法：<br>            通过实现 Runnable 接口；<br>            通过继承 Thread 类本身；<br>            通过 Callable 和 Future 创建线程。</p><p>总结：Thread和Runnable的区别<br>如果一个类继承Thread，则不适合资源共享。但是如果实现了Runable接口的话，则很容易的实现资源共享。<br>实现Runnable接口比继承Thread类所具有的优势：<br>1）：适合多个相同的程序代码的线程去处理同一个资源<br>2）：可以避免java中的单继承的限制<br>3）：增加程序的健壮性，代码可以被多个线程共享，代码和数据独立<br>4）：线程池只能放入实现Runable或callable类线程，不能直接放入继承Thread的类</p><p>线程调度<br>1、调整线程优先级：Java线程有优先级，优先级高的线程会获得较多的运行机会。</p><p>Java线程的优先级用整数表示，取值范围是1~10，Thread类有以下三个静态常量：<br>static int MAX_PRIORITY<br>          线程可以具有的最高优先级，取值为10。<br>static int MIN_PRIORITY<br>          线程可以具有的最低优先级，取值为1。<br>static int NORM_PRIORITY<br>          分配给线程的默认优先级，取值为5。</p><p>Thread类的setPriority()和getPriority()方法分别用来设置和获取线程的优先级。</p><p>每个线程都有默认的优先级。主线程的默认优先级为Thread.NORM_PRIORITY。<br>线程的优先级有继承关系，比如A线程中创建了B线程，那么B将和A具有相同的优先级。<br>JVM提供了10个线程优先级，但与常见的操作系统都不能很好的映射。如果希望程序能移植到各个操作系统中，应该仅仅使用Thread类有以下三个静态常量作为优先级，这样能保证同样的优先级采用了同样的调度方式。</p><p>2、线程睡眠：Thread.sleep(long millis)方法，使线程转到阻塞状态。millis参数设定睡眠的时间，以毫秒为单位。当睡眠结束后，就转为就绪（Runnable）状态。sleep()平台移植性好。</p><p>3、线程等待：Object类中的wait()方法，导致当前的线程等待，直到其他线程调用此对象的 notify() 方法或 notifyAll() 唤醒方法。这个两个唤醒方法也是Object类中的方法，行为等价于调用 wait(0) 一样。</p><p>4、线程让步：Thread.yield() 方法，暂停当前正在执行的线程对象，把执行机会让给相同或者更高优先级的线程。</p><p>5、线程加入：join()方法，等待其他线程终止。在当前线程中调用另一个线程的join()方法，则当前线程转入阻塞状态，直到另一个进程运行结束，当前线程再由阻塞转为就绪状态。</p><p>6、线程唤醒：Object类中的notify()方法，唤醒在此对象监视器上等待的单个线程。如果所有线程都在此对象上等待，则会选择唤醒其中一个线程。选择是任意性的，并在对实现做出决定时发生。线程通过调用其中一个 wait 方法，在对象的监视器上等待。 直到当前的线程放弃此对象上的锁定，才能继续执行被唤醒的线程。被唤醒的线程将以常规方式与在该对象上主动同步的其他所有线程进行竞争；例如，唤醒的线程在作为锁定此对象的下一个线程方面没有可靠的特权或劣势。类似的方法还有一个notifyAll()，唤醒在此对象监视器上等待的所有线程。<br> 注意：Thread中suspend()和resume()两个方法在JDK1.5中已经废除，不再介绍。因为有死锁倾向。</p><p>wait()相关详解<br>Obj.wait()，与Obj.notify()必须要与synchronized(Obj)一起使用，也就是wait,与notify是针对已经获取了Obj锁进行操作，从语法角度来说就是Obj.wait(),Obj.notify必须在synchronized(Obj){…}语句块内。从功能上来说wait就是说线程在获取对象锁后，主动释放对象锁，同时本线程休眠。直到有其它线程调用对象的notify()唤醒该线程，才能继续获取对象锁，并继续执行。相应的notify()就是对对象锁的唤醒操作。但有一点需要注意的是notify()调用后，并不是马上就释放对象锁的，而是在相应的synchronized(){}语句块执行结束，自动释放锁后，JVM会在wait()对象锁的线程中随机选取一线程，赋予其对象锁，唤醒线程，继续执行。这样就提供了在线程间同步、唤醒的操作。Thread.sleep()与Object.wait()二者都可以暂停当前线程，释放CPU控制权，主要的区别在于Object.wait()在释放CPU同时，释放了对象锁的控制。</p><p>线程示例1（这个可以作为模板，请记住套路）<br>/**</p><ul><li>功能描述: 三个售票窗口同时出售20张票</li><li>程序分析：1.票数要使用同一个静态值<pre><code>     2.为保证不会出现卖出同一个票数，要java多线程同步锁。</code></pre></li><li>设计思路：<pre><code>      1.创建一个站台类Station，继承Thread，重写run方法，在run方法里面执行售票操作！           售票要使用同步锁：即有一个站台卖这张票时，其他站台要等这张票卖完！      2.创建主方法调用类</code></pre>@Author:braincao<br>@Date: 2018/1/3 10:43</li><li>/<br>public class Test<br>{<br>  public static void main(String[] args)<br>  {<pre><code>  Station a = new Station(&quot;A&quot;);  Station b = new Station(&quot;B&quot;);  Station c = new Station(&quot;C&quot;);  a.start();  b.start();  c.start();</code></pre>  }<br>}</li></ul><p>class Station extends Thread{<br>    private String name;<br>    private static int tickets = 20; //为了保持票数的一致，票数要静态<br>    public Station(String name)<br>    {<br>        super(name);<br>    }</p><pre><code>static Object key = &quot;key&quot;; //创建一个静态钥匙public void run(){    while(tickets&gt;0)    {        synchronized(key) //这个很重要，必须使用一个锁，进去的人会把钥匙拿在手上，出来后才把钥匙让出来        {            if(tickets&gt;0)            {                tickets--;                System.out.println(getName() + &quot;窗口卖票一张 余票：&quot; + tickets);            }            else            {                System.out.println(&quot;窗口无法买票，票买完了&quot;);            }        }        try        {            sleep(1000); //休息一秒，这里休息是必要的，否则很容易只让一个线程一直卖票，休息了给其他线程让出机会        }        catch(InterruptedException e)        {            e.printStackTrace();        }    }}</code></pre><p>}</p><p>线程示例2：建立三个线程，A线程打印10次A，B线程打印10次B,C线程打印10次C，要求线程同时运行，交替打印10次ABC。这个问题用Object的wait()，notify()就可以很方便的解决<br>/**</p><ul><li><p>功能描述:建立三个线程，A线程打印10次A，B线程打印10次B,C线程打印10次C，</p></li><li><p>要求线程同时运行，交替打印10次ABC。这个问题用Object的wait()，notify()就可以很方便的解决</p></li><li><p>@Author:braincao</p></li><li><p>@Date: 2018/1/3 14:44</p></li><li><p>/<br>package com.multithread.wait;<br>public class Test implements Runnable {</p><p>  private String name;<br>  private Object prev; //前一个对象锁<br>  private Object self; //自身对象锁</p><p>  private Test(String name, Object prev, Object self) {</p><pre><code>  this.name = name;  this.prev = prev;  this.self = self;</code></pre><p>  }</p><p>  @Override<br>  public void run() {</p><pre><code>  int count = 10;  while (count &gt; 0) {      synchronized (prev) {          synchronized (self) {              System.out.print(name);              count--;              self.notify(); //释放自身对象锁          }          try {              prev.wait();          } catch (InterruptedException e) {              e.printStackTrace();          }      }  }</code></pre><p>  }</p><p>  public static void main(String[] args) throws Exception {</p><pre><code>  Object a = new Object();  Object b = new Object();  Object c = new Object();  Test pa = new Test(&quot;A&quot;, c, a);  Test pb = new Test(&quot;B&quot;, a, b);  Test pc = new Test(&quot;C&quot;, b, c);</code></pre></li></ul><pre><code>    new Thread(pa).start();    Thread.sleep(1000);  //确保按顺序A、B、C执行    new Thread(pb).start();    Thread.sleep(1000);    new Thread(pc).start();    Thread.sleep(1000);}</code></pre><p>}    </p><p>输出结果：<br>ABCABCABCABCABCABCABCABCABCABC<br>     先来解释一下其整体思路，从大的方向上来讲，该问题为三线程间的同步唤醒操作，主要的目的就是ThreadA-&gt;ThreadB-&gt;ThreadC-&gt;ThreadA循环执行三个线程。为了控制线程执行的顺序，那么就必须要确定唤醒、等待的顺序，所以每一个线程必须同时持有两个对象锁，才能继续执行。一个对象锁是prev，就是前一个线程所持有的对象锁。还有一个就是自身对象锁。主要的思想就是，为了控制执行的顺序，必须要先持有prev锁，也就前一个线程要释放自身对象锁，再去申请自身对象锁，两者兼备时打印，之后首先调用self.notify()释放自身对象锁，唤醒下一个等待线程，再调用prev.wait()释放prev对象锁，终止当前线程，等待循环结束后再次被唤醒。运行上述代码，可以发现三个线程循环打印ABC，共10次。程序运行的主要过程就是A线程最先运行，持有C,A对象锁，后释放A,C锁，唤醒B。线程B等待A锁，再申请B锁，后打印B，再释放B，A锁，唤醒C，线程C等待B锁，再申请C锁，后打印C，再释放C,B锁，唤醒A。看起来似乎没什么问题，但如果你仔细想一下，就会发现有问题，就是初始条件，三个线程按照A,B,C的顺序来启动，按照前面的思考，A唤醒B，B唤醒C，C再唤醒A。但是这种假设依赖于JVM中线程调度、执行的顺序。</p><p>参考资料：<br>请详看java多线程教程</p><hr><p>2018.1.2</p><p>theme: java学习笔记</p><p>问题描述与解决方法：socket网络通信<br>三次握手<br>在TCP/IP协议中，TCP协议通过三次握手建立一个可靠的连接</p><p>而下图是java socket网络通信的过程。定睛一看，服务器socket与客户端socket建立连接的部分其实就是大名鼎鼎的三次握手。</p><p>第一次握手：客户端尝试连接服务器，向服务器发送syn包（同步序列编号Synchronize Sequence Numbers），syn=j，客户端进入SYN_SEND状态等待服务器确认<br>第二次握手：服务器接收客户端syn包并确认（ack=j+1），同时向客户端发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态<br>第三次握手：第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手</p><p>参考资料：<br>请详看java网络通信部分</p><hr><p>2018.1.7</p><p>theme: 刷面经看到别人总结的，特别好</p><p>1.抽象方法只能定义在抽象类中，抽象方法和抽象类必须由abstract修饰，abstract关键字只能描述类和方法，不能描述变量。抽象方法只定义方法声明，不定义方法实现。抽象类不可以被实例化（创建对象），只有通过子类继承抽象类并覆盖抽象类中的所有抽象方法后，该子类才可以被实例化，否则该子类还是一个抽象类。抽象类中有构造函数用于给子类对象进行初始化，同时抽象类中可以含有非抽象方法。abstract关键字不可以与final，private,static关键字共存，因为被final修饰的方法不可以被重写，意味着子类不可以重写该方法，如果abstract和final共同修饰父类中的方法，子类要实现抽象方法（abstract的作用），而final又不让该方法重写，这相互矛盾。如果private和abstract共同修饰父类中的方法，private修饰则该方法不可以被子类访问，但是abstract修饰需要子类去实现，两者产生矛盾。如果static和abstract共同修饰父类中的方法，static表示是静态的方法，随着类的加载而加载，则该方法不需要在子类中去实现，这与abstract关键字矛盾。 2.static用于修饰成员变量和成员函数，想要实现对象中的共性数据的对象共享，可以将这个数据进行静态修饰，被静态修饰的成员可以直接被类名调用，静态随着类的加载而加载，而且优先于对象存在。静态方法只能访问静态成员（静态方法和静态变量），不可以访问非静态成员，这是因为静态方法加载时，优先于对象存在，所以没有办法访问对象中的成员。静态方法中不能使用this和super关键字，因为this代表本类对象，super代表父类对象，而静态时，有可能没有对象存在，所以this和super无法使用。 3.final关键字可以修饰类，方法，变量（成员变量内，局部变量，静态变量），被final修饰的类是一个最终类，不可以被继承，被final修饰的方法是一个最终方法，不可以被覆盖，但是可以被继承。被final修饰的变量只能是一个常量，只能赋值一次。内部类被定义在类中的局部位置上时，只能访问局部被final修饰的局部变量。</p><p>版权声明：本文为原创文章，客官如需转载请注明，感谢支持</p><pre><code>转载自：[Braincao&#39;s Blog的博客](https://braincao.github.io)</code></pre>]]></content>
      
      
      <categories>
          
          <category> java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客系统搭建过程</title>
      <link href="/2018/02/22/build-hexo/"/>
      <url>/2018/02/22/build-hexo/</url>
      
        <content type="html"><![CDATA[<p>搭建Hexo博客的经验贴，便于日后查看，也希望小白少走些弯路</p><a id="more"></a><p>说道技术博客，最开始在csdn上记录技术学习笔记较多，坚持时间较长。后来也迁移副本至博客园，可能先入为主的原因，之后一直没再同步更新，今天直接把博客园删了。同样，先前也有自己搭建过一次博客，jekyll系统、Hexo系统都做过，后来因为考研的原因也都草草收场。博客虽搁置一边但笔记还要记啊，懒出天际的我直接markdown文档保存在电脑中，这些待嫁的深闺文章越积越多，毕业前的寒假闲来无事，突然想起这些烂摊子该理一理。</p><p>除了csdn/cnblog/语雀这种商业博客，先后几次自己动手搭建个人博客，有从头写html/css/js的作坊博客，当然也有最后确定要用的hexo博客系统。</p><p>hexo好处多多，不用自己架服务器，同时主题样式可选种类较多，开源且稳定，最开始用的时候用github管理，后来由于各种原因墙内访问越来越慢（你懂），因此就搭建个人博客来说选择gitee来做托管仓库，访问速度提升不少。</p><p>这里附上我的博客，欢迎交流：<a href="https://braincao.cn/">https://braincao.cn/</a></p><p>下面主要总结一下gitee+hexo的搭建过程以及遇到的坑，如果用github也是异曲同工，对号入座即可。</p><h1 id="一、先搭建-建立博客系统"><a href="#一、先搭建-建立博客系统" class="headerlink" title="一、先搭建-建立博客系统"></a>一、先搭建-建立博客系统</h1><h2 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h2><p>到<a href="https://nodejs.org/en/" target="_blank" rel="noopener">node.js</a>官网下载node.js并安装</p><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>自行百度安装</p><h2 id="本地建立hexo系统"><a href="#本地建立hexo系统" class="headerlink" title="本地建立hexo系统"></a>本地建立hexo系统</h2><p>安装hexo：</p><pre><code>sudo npm install -g hexo-cli</code></pre><p>本地创建自己的blog目录，如HexoBlog，在该目录下进行Hexo初始化：</p><pre><code>hexo init HexoBlogcd ~/HexoBlog/npm install</code></pre><h2 id="远程建立gitee上的hexo系统"><a href="#远程建立gitee上的hexo系统" class="headerlink" title="远程建立gitee上的hexo系统"></a>远程建立gitee上的hexo系统</h2><p>用Gitee Pages建立gitee远程博客仓库。</p><ol><li><p>码云注册并建立名为hexoblog的仓库（使用readme初始化项目）</p></li><li><p>通过 <code>hexoblog项目-&gt;Service-&gt;Gitee Pages服务</code> 建立博客仓库，它会自动生成博客地址，下文会介绍自定义域名绑定博客地址</p></li><li><p>添加ssh key：将本地的id_rsa.pub添加到gitee个人中心的ssh key中。为什么要添加ssh key？ 原因：后续想用git方式通过ssh与远程仓库连接，快捷一些，但为了安全起见，需要公密钥的方式来连接。本地设置gitglobal的user.name user.email，生成一个基于如user.email的ssh key，它是一对私钥和公钥，私钥自己保存别动它，把ssh key中的公钥添加到github官网自己账号中，这样就可以用自己设备很方便的连接至自己的github并享受其服务。如有多台设备，可以每台设备生成一对ssh key，并将多个公钥添加github账号中即可，这样就可以实现多台设备无缝连接，便于移动办公。</p></li><li><p>在_config.yml中配置博客url、远程Git：</p></li></ol><pre><code># 码云需要配下面两行，否则会出现主题样式展示有问题，github貌似不用配url: https://braincao.cnroot: /# 都要配deploy:  type: git  repo: git@gitee.com:username/repo.git  branch: master</code></pre><h2 id="发布博客到gitee"><a href="#发布博客到gitee" class="headerlink" title="发布博客到gitee"></a>发布博客到gitee</h2><p>安装Hexo必备插件：</p><pre><code>npm install hexo-deployer-git --save #hexo通过git发布</code></pre><p>输入命令发布博客，首次发布需要在shell中输入账号和密码:</p><pre><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></pre><p>github会发布后会自动更新博客页面，码云将此功能变为人民币玩家功能，因此发布后需要在码云仓库中手动update才能更新博客</p><h2 id="附常用hexo命令"><a href="#附常用hexo命令" class="headerlink" title="附常用hexo命令"></a>附常用hexo命令</h2><pre><code>hexo clean #清除public静态页面缓存（如果有）hexo new page &quot;pageName&quot; #新建页面hexo help  # 查看帮助hexo version  #查看Hexo的版本hexo new &quot;postName&quot; #新建文章简写:hexo n == hexo new #新建文章hexo g == hexo generate #生成静态页面至public目录hexo s == hexo server #本地服务，http://localhost:4000预览hexo d == hexo deploy #部署至github仓库完成博客发布hexo n page &#39;about&#39; #建立导航栏菜单，如about关于页面</code></pre><h1 id="二、后装修-个性化配置"><a href="#二、后装修-个性化配置" class="headerlink" title="二、后装修-个性化配置"></a>二、后装修-个性化配置</h1><p>个性化配置主要包括站点配置与主题配置，跟着<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo官方文档</a>、每个主题的官方指导走就行。第三方功能包括但不限于：首页全文阅读、站内搜索、访问人数、字数统计、打赏功能、多说评论、404页面、RSS、sitemap</p><p>下面仅以3-hexo为例，罗列下我的个性化配置。</p><h2 id="主题下载"><a href="#主题下载" class="headerlink" title="主题下载"></a>主题下载</h2><p>Hexo系统有很多主题，较为主流的如Next主题，本文采用3-hexo主题。<br>    git clone <a href="https://github.com/yelog/hexo-theme-3-hexo.git" target="_blank" rel="noopener">https://github.com/yelog/hexo-theme-3-hexo.git</a> themes/3-hexo</p><h2 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h2><p>在根目录的站点配置文件配置主题即可</p><pre><code>theme: 3-hexo</code></pre><p>这里注意3-hexo主题有个坑，配置时还需在主题配置文件中更改根目录：</p><pre><code>#如果博客放置位置不是根目录，则可以通过配置此路径解决静态文件路径错误问题#比如访问地址为 yelog.org/blog 那就需要配置为 blog_path: /blog 才能正常访问blog_path: /hexoblog #记得改这里，初始是/</code></pre><h2 id="顺着主题-站点配置文件改"><a href="#顺着主题-站点配置文件改" class="headerlink" title="顺着主题/站点配置文件改"></a>顺着主题/站点配置文件改</h2><p>更改能看懂的先，如作者、头像、github/邮箱地址、评论、友情链接、打赏二维码、置顶、评论(gitalk)等，看不懂的先别改。</p><p>这里有个点，3-hexo有自己的语法高亮，因此需把hexo站点高亮关了</p><pre><code>highlight:  enable: false  #true改成false</code></pre><h2 id="文章分类-amp-md头部"><a href="#文章分类-amp-md头部" class="headerlink" title="文章分类 &amp; md头部"></a>文章分类 &amp; md头部</h2><p>写md时直接分类即可，另外3-hexo原生支持多级分类（在主题配置文件中有详细介绍），具体的md头部如下：</p><pre><code>---title: 剑指offer刷题date: 2018-09-21 17:32:47updated: 2020-02-19 14:36:48categories:    - 算法刷题tags:    - 剑指offer刷题top: 1originUrl: https://zhuanlan.zhihu.com/p/28987530source: mac mdimg source: csdn——如果有图的话就在csdn上编辑，再同步至mac md上，最后再从mac md源进行全网同步---</code></pre><p>注意：有的主题首页只显示文章的简介(全文阅读)：在md文章中的合适位置添加 &lt; !–more–&gt; 标签即可，之前的文字都会写在首页文章名称下面的简介里</p><h2 id="关于、相册等导航栏菜单建立"><a href="#关于、相册等导航栏菜单建立" class="headerlink" title="关于、相册等导航栏菜单建立"></a>关于、相册等导航栏菜单建立</h2><p>Hexo里，默认的导航菜单只有Home和Archives两项，还需自行添加其他导航栏菜单</p><pre><code>hexo n page &#39;about&#39;</code></pre><p>这样就建立了source/about文件夹，然后在主题配置文件中：</p><pre><code>menu:  Home: /  About: /about  #注意3-hexo主题这里需要改成hexoblog/about</code></pre><p>在menu中加了一项设置About: /about，前面部分是显示名称，后面部分是访问路径，即source/about中的index.md，就是想要访问About时的页面。同理，还可添加别的菜单，如  <code>Archives: /archives</code>、<code>Photo: /photo</code>等</p><h2 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h2><p>gitee pages 会自动生成hexo博客地址，可正常访问，如果有自定义域名需要则要进行如下操作。</p><ol><li><p>阿里云购买域名、购买云解析dns服务，再购买免费的DVssl安全证书</p></li><li><p>在云解析dns服务中配置域名解析：添加CNAME，记录值为<code>gitee.gitee.io</code></p></li><li><p>在本地hexo根目录的source文件夹中新建CNAME文件，里面写自定义的域名<code>braincao.cn</code>，然后<code>hexo clean &amp; hexo g &amp; hexo d</code></p></li><li><p>在gitee的page service中添加自定义域名 braincao.cn，再把已买好的ssl证书上传，即可生成<code>https://braincao.cn</code>的博客地址</p></li></ol><p>这样就可以通过自定义域名访问博客地址了，自定义域名的好处可以不透漏gitee项目地址，通过阿里云有负载均衡等付费服务，访问延时更低</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>至此，已基本完成Hexo博客系统搭建，剩下需要做的就是内容产出了。</p><p>截止完成本文时，看了下我的CSDN博客统计：原创 <strong>137</strong> 篇，访问量 <strong>28万+</strong>，排名 <strong>2万</strong>，其中最热门的 <a href="http://blog.csdn.net/pop_rain/article/details/70477085" target="_blank" rel="noopener">Win10+Ubuntu17.04双系统安装</a> 访问量 <strong>12万+</strong>。由此说明一个完整的入门贴对于小白来说还是有所帮助的，而本人做博客的初衷之一也是希望记录自己成长过程的同时分享给更多同行自己遇到的坑和响应的解决方案；同样，每当入门一个全新的领域如能看到同行前辈分享的完整学习贴也会感激万分，这种正向反馈给我坚持技术分享的动力。技术之路无穷尽，但希望在这条充满挑战兼具无尽获得感的路上，我们都会编程出属于自己的那片天，熠熠生辉。</p>]]></content>
      
      
      <categories>
          
          <category> 综合技术问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
